movies_user_2
# A matrix of recommendations for each user
recc_matrix <- sapply(prediction@items,
function(x){ as.integer(colnames(ratings_movies)[x]) })
recc_matrix[,1:4]
# First, install the keras R package from GitHub as follows:
devtools::install_github("rstudio/keras")
# The Keras R interface uses the TensorFlow backend engine by default.
# To install both the core Keras library as well as the TensorFlow backend use the install_keras() function:
library(keras)
install_keras()
# Load in a pretrained model: Using Inception V3 with ImageNet weights
model <- application_inception_v3(weights = "imagenet")
# Load in image from `imgs` directory. Images include that of an elephant, hamster, apples and oranges
# Feel free to add your own images to the directory to test the model
img_path <- "./imgs/elephant.jpg"
img <- image_load(img_path, target_size = c(299, 299))
# Convert img to an array for tensor calculations
img_array <- image_to_array(img)
# Ensure we have a 4d tensor with single element in the batch dimension
img_tensor <- array_reshape(img_array, c(1, dim(img_array)))
# Process the input so that it can be used for prediction
processed_tensor <- inception_v3_preprocess_input(img_tensor)
# Make a prediction based on the model
predictions <- model %>% predict(processed_tensor)
imagenet_decode_predictions(predictions, top = 10)[[1]]
library(dplyr)
library(ggplot2)
library("maps")
library(tidyr)
library("readxl")
library(shiny)
library(plotly)
source("my_ui.R")
source("my_server.R")
income_by_race <- read_xlsx("data/income_by_race.xlsx")
le_national <- read_xlsx("data/life_expectancy_death_rates.xlsx")
pct_insurance_by_race <- read_xlsx("data/pct_insurance_by_race.xlsx")
le_by_state <- read.csv("data/IHME_US_STATE_LIFE_EXPECTANCY_1987_2009.csv", stringsAsFactors = FALSE)
le_by_income_state <- read.csv("data/health_ineq_online_table_5.csv", stringsAsFactors = FALSE)
income_by_race <- as.data.frame(income_by_race)
le_national <- as.data.frame(le_national)
pct_insurance_by_race <- as.data.frame(pct_insurance_by_race)
# Combine income_by_race and le_national dataframes
income_black_white <- income_by_race %>%
filter(Race %in% c("All Races", "White Alone", "Black Alone")) %>%
select(Year, Race, median)
le_black_white <- le_national %>%
filter(Sex == "Both Sexes") %>%
select(-Age.Adusted.Death.Rate)
income_black_white_wide_median <- spread(income_black_white,
key = "Race",
value = "median" )
colnames(income_black_white_wide_median) <- c("Year", "All Races", "Black", "White")
income_black_white <- gather(income_black_white_wide_median,
key = "Race",
value = "median_income", "All Races", "Black", "White")
income_by_le <- left_join(income_black_white, le_black_white, by = c("Year", "Race"))
le_by_income_state <- le_by_income_state %>%
select(statename, year, le_raceadj_q1_F, le_raceadj_q2_F, le_raceadj_q3_F, le_raceadj_q4_F,
le_raceadj_q1_M, le_raceadj_q2_M, le_raceadj_q3_M, le_raceadj_q4_M)
le_by_income_state_long <- gather(le_by_income_state, key = income_quartile, value = race_adjusted_le,
le_raceadj_q1_F, le_raceadj_q2_F, le_raceadj_q3_F, le_raceadj_q4_F,
le_raceadj_q1_M, le_raceadj_q2_M, le_raceadj_q3_M, le_raceadj_q4_M )
p <- ggplot(data=le_by_income_state_long, aes(x = income_quartile, y = race_adjusted_le, fill = year)) +
geom_bar(stat="identity", position=position_dodge())
p <- ggplotly(p)
setwd("~/Desktop/infoaa2final")
library(dplyr)
library(ggplot2)
library("maps")
library(tidyr)
library("readxl")
library(shiny)
library(plotly)
source("my_ui.R")
source("my_server.R")
income_by_race <- read_xlsx("data/income_by_race.xlsx")
le_national <- read_xlsx("data/life_expectancy_death_rates.xlsx")
pct_insurance_by_race <- read_xlsx("data/pct_insurance_by_race.xlsx")
le_by_state <- read.csv("data/IHME_US_STATE_LIFE_EXPECTANCY_1987_2009.csv", stringsAsFactors = FALSE)
le_by_income_state <- read.csv("data/health_ineq_online_table_5.csv", stringsAsFactors = FALSE)
income_by_race <- as.data.frame(income_by_race)
le_national <- as.data.frame(le_national)
pct_insurance_by_race <- as.data.frame(pct_insurance_by_race)
# Combine income_by_race and le_national dataframes
income_black_white <- income_by_race %>%
filter(Race %in% c("All Races", "White Alone", "Black Alone")) %>%
select(Year, Race, median)
le_black_white <- le_national %>%
filter(Sex == "Both Sexes") %>%
select(-Age.Adusted.Death.Rate)
income_black_white_wide_median <- spread(income_black_white,
key = "Race",
value = "median" )
colnames(income_black_white_wide_median) <- c("Year", "All Races", "Black", "White")
income_black_white <- gather(income_black_white_wide_median,
key = "Race",
value = "median_income", "All Races", "Black", "White")
income_by_le <- left_join(income_black_white, le_black_white, by = c("Year", "Race"))
le_by_income_state <- le_by_income_state %>%
select(statename, year, le_raceadj_q1_F, le_raceadj_q2_F, le_raceadj_q3_F, le_raceadj_q4_F,
le_raceadj_q1_M, le_raceadj_q2_M, le_raceadj_q3_M, le_raceadj_q4_M)
le_by_income_state_long <- gather(le_by_income_state, key = income_quartile, value = race_adjusted_le,
le_raceadj_q1_F, le_raceadj_q2_F, le_raceadj_q3_F, le_raceadj_q4_F,
le_raceadj_q1_M, le_raceadj_q2_M, le_raceadj_q3_M, le_raceadj_q4_M )
p <- ggplot(data=le_by_income_state_long, aes(x = income_quartile, y = race_adjusted_le, fill = year)) +
geom_bar(stat="identity", position=position_dodge())
p <- ggplotly(p)
p
p <- ggplot(data=le_by_income_state_long, aes(x = income_quartile, y = race_adjusted_le, fill = year)) +
geom_bar(stat="identity")
p
x <- 1:5
y1 <- rnorm(5)
y2 <- rnorm(5,20)
par(mar=c(5,4,4,5)+.1)
plot(x,y1,type="l",col="red")
par(new=TRUE)
plot(x, y2,,type="l",col="blue",xaxt="n",yaxt="n",xlab="",ylab="")
axis(4)
mtext("y2",side=4,line=3)
legend("topleft",col=c("red","blue"),lty=1,legend=c("y1","y2"))
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(ggplot2)
library("maps")
library(tidyr)
library("readxl")
library(shiny)
library(plotly)
runApp()
income_by_le
income_black_white
income_by_race <- read_xlsx("data/income_by_race.xlsx")
le_national <- read_xlsx("data/life_expectancy_death_rates.xlsx")
pct_insurance_by_race <- read_xlsx("data/pct_insurance_by_race.xlsx")
le_by_state <- read.csv("data/IHME_US_STATE_LIFE_EXPECTANCY_1987_2009.csv", stringsAsFactors = FALSE)
le_by_income_state <- read.csv("data/health_ineq_online_table_5.csv", stringsAsFactors = FALSE)
le_at_birth_race <- read.csv("data/le_at_birth_race.csv", stringsAsFactors = FALSE)
income_by_race <- as.data.frame(income_by_race)
le_national <- as.data.frame(le_national)
pct_insurance_by_race <- as.data.frame(pct_insurance_by_race)
# Combine income and le dataframes
income_black_white <- income_by_race %>%
filter(Race %in% c("All Races", "White Alone", "Black Alone")) %>%
select(Year, Race, median)
le_black_white <- le_national %>%
filter(Sex == "Both Sexes") %>%
select(-Age.Adusted.Death.Rate)
income_black_white_wide_median <- spread(income_black_white,
key = "Race",
value = "median" )
colnames(income_black_white_wide_median) <- c("Year", "All Races", "Black", "White")
income_black_white <- gather(income_black_white_wide_median,
key = "Race",
value = "median_income", "All Races", "Black", "White")
income_by_le <- left_join(income_black_white, le_black_white, by = c("Year", "Race"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(income_by_le)
head(income_black_white)
head(income_by_race)
View(income_by_race)
head(income_by_le)
income_by_le <- income_by_le %>%
select(-Sex)
head(income_by_le)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
years <- unique(income_by_le$Year)
years
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
races <- income_by_le$Race
races
races <- unique(income_by_le$Race)
races
runApp()
runApp()
View(le_at_birth_race)
le_at_birth_race <- read.csv("data/le_at_birth_race.csv", stringsAsFactors = FALSE)
le_at_birth_race <- le_at_birth_race %>%
mutate(Location = tolower(Location))
le_at_birth_race <- read.csv("data/le_at_birth_race.csv", stringsAsFactors = FALSE)
View(le_at_birth_race)
colnames(le_at_birth_race)
le_at_birth_race_long <- le_at_birth_race %>%
gather(key = "Race",
value = "Life_Expectancy", "White", "African.American", "Latino", "Asian.American",
"Native.American" )
head(le_at_birth_race_long)
runApp()
head(le_at_birth_race_long)
runApp()
plot2 <- ggplot(le_at_birth_race_long) +
geom_bar(mapping = aes(x = Life_Expectancy))
plot2
View(le_at_birth_race_long)
le_at_birth_race_long <- le_at_birth_race %>%
filter(Location != "United States") %>%
gather(key = "Race",
value = "Life_Expectancy", "White", "African.American", "Latino", "Asian.American",
"Native.American")
View(le_at_birth_race_long)
plot2 <- ggplot(le_at_birth_race_long) +
geom_boxplot(mapping = aes(x = Race, y = Life_Expectancy))
plot2
le_at_birth_race_long <- le_at_birth_race %>%
filter(Location != "United States") %>%
gather(key = "Race",
value = "Life_Expectancy", "White", "African.American", "Latino", "Asian.American",
"Native.American")
plot2 <- ggplot(le_at_birth_race_long) +
geom_boxplot(mapping = aes(x = Race, y = Life_Expectancy))
plot2
plot2 <- ggplot(le_at_birth_race_long, aes(Race, Life_Expectancy)) +
geom_boxplot(varwidth = TRUE)
plot2
le_at_birth_race_long <- le_at_birth_race %>%
filter(Location == "United States") %>%
gather(key = "Race",
value = "Life_Expectancy", "White", "African.American", "Latino", "Asian.American",
"Native.American")
le_at_birth_race_long
View(le_at_birth_race_long)
p <- ggplot(le_at_birth_race_long, aes(Race)) +
geom_bar()
p
p <- ggplot(le_at_birth_race_long, aes(Life_Expectancy)) +
geom_bar()
p
p <- ggplot(le_at_birth_race_long, aes(Race)) +
geom_bar()
p
p <- ggplot(le_at_birth_race_long, aes(Race, Life_Expectancy)) +
geom_bar()
p
p <- ggplot(le_at_birth_race_long, aes(Race, Life_Expectancy)) +
geom_point()
p
le_at_birth_race_long <- le_at_birth_race %>%
filter(Location != "United States") %>%
gather(key = "Race",
value = "Life_Expectancy", "White", "African.American", "Latino", "Asian.American",
"Native.American")
p <- ggplot(le_at_birth_race_long, aes(Race, Life_Expectancy)) +
geom_point()
p
le_at_birth_race_long <- le_at_birth_race %>%
filter(Location == "United States") %>%
gather(key = "Race",
value = "Life_Expectancy", "White", "African.American", "Latino", "Asian.American",
"Native.American")
p <- ggplot(le_at_birth_race_long, aes(Race, Life_Expectancy)) +
geom_point()
p
b <- barplot(le_at_birth_race_long$Life_Expectancy)
b <- barplot(Life_Expectancy)
b <- barplot(le_at_birth_race_long)
b <- barplot(le_at_birth_race_long[le_at_birth_race_long$Life_Expectancy,])
box <- ggplot(le_at_birth_race_long, aes(Race, Life_Expectancy)) + geom_boxplot()
box
le_at_birth_race_long <- le_at_birth_race %>%
filter(Location != "United States") %>%
gather(key = "Race",
value = "Life_Expectancy", "White", "African.American", "Latino", "Asian.American",
"Native.American")
box <- ggplot(le_at_birth_race_long, aes(Race, Life_Expectancy)) + geom_boxplot()
box
box <- ggplot(le_at_birth_race_long, aes(x = Race, y = Life_Expectancy)) + geom_boxplot()
box
box <- ggplot(le_at_birth_race_long, aes(x = Race, y = Life_Expectancy, color = Race)) + geom_boxplot()
box
box <- ggplot(le_at_birth_race_long, aes(x = Race, y = Life_Expectancy, color = Race)) + geom_boxplot(na.rm = TRUE)
box
p <- ggplot(le_at_birth_race_long, aes(Race, Life_Expectancy)) +
geom_point()
p
p <- ggplot(le_at_birth_race_long, aes(Race, Life_Expectancy, color = Race)) +
geom_point()
p
locations <- unique(le_at_birth_race_long$Location)
locations
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
le_at_birth_race_long
runApp()
runApp()
runApp()
head(le_at_birth_race)
runApp()
head(le_at_birth_race)
runApp()
library(dplyr)
library(ggplot2)
library("maps")
library(tidyr)
library("readxl")
library(shiny)
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
le_at_birth_race_long[le_at_birth_race_long$Location,]
le_at_birth_race_long <- le_at_birth_race %>%
filter(Location != "United States") %>%
gather(key = "Race",
value = "Life_Expectancy", "White", "African.American", "Latino", "Asian.American",
"Native.American")
le_at_birth_race_long[le_at_birth_race_long$Location,]
le_at_birth_race <- read.csv("data/le_at_birth_race.csv", stringsAsFactors = FALSE)
le_at_birth_race_long <- le_at_birth_race %>%
filter(Location != "United States") %>%
gather(key = "Race",
value = "Life_Expectancy", "White", "African.American", "Latino", "Asian.American",
"Native.American")
head(le_at_birth_race_long)
le_at_birth_race_long[le_at_birth_race_long$Location,]
le_at_birth_race_long[le_at_birth_race_long$Location == "Washington",]
locations <- unique(le_at_birth_race_long$Location)
locations
runApp()
runApp()
runApp()
View(le_at_birth_race_long)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
le_at_birth_race <- le_at_birth_race %>%
mutate(Location = tolower(Location))
le_at_birth_race <- read.csv("data/le_at_birth_race.csv", stringsAsFactors = FALSE, na.strings = "NSD")
le_at_birth_race <- le_at_birth_race %>%
mutate(Location = tolower(Location))
View(le_at_birth_race)
le_at_birth_race <- read.csv("data/le_at_birth_race.csv", stringsAsFactors = FALSE, na.strings = "NSD")
View(le_at_birth_race)
le_at_birth_race <- le_at_birth_race %>%
mutate(Location = tolower(Location))
View(le_at_birth_race)
le_at_birth_race <- rename(le_at_birth_race, region = Location)
View(le_at_birth_race)
runApp()
locations <- toupper(unique(le_at_birth_race_long$region))
locations
runApp()
head(income_black_white)
head(income_black_white_wide_median)
sum(income_black_white_wide_median$Black)
nrow(income_black_white_wide_median)
View(income_black_white_wide_median)
avg_median_income_black <- sum(income_black_white_wide_median$Black) / nrow(income_black_white_wide_median)
avg_median_income_black
avg_median_income_white <- sum(income_black_white_wide_median$White) / nrow(income_black_white_wide_median)
avg_median_income_white
avg_median_income_all <- sum(income_black_white_wide_median$`All Races`) / nrow(income_black_white_wide_median)
avg_median_income_all
le_black_white
View(income_by_le)
income_by_le %>% filter(Race == "Black") %>% select(Avg.Life.Expectancy.Years)
le_black <- income_by_le %>%
filter(Race == "Black") %>%
select(Avg.Life.Expectancy.Years)
sum(le_black)
sum(le_black, na.rm = TRUE)
View(le_black)
nrow(le_black, na.rm = TRUE)
nrow(le_black)
nrow(le_black) - 2
sum(le_black, na.rm = TRUE) / (nrow(le_black) - 2)
avg_le_white <- sum(le_white, na.rm = TRUE) / (nrow(le_white) - 2)
le_white <- income_by_le %>%
filter(Race == "White") %>%
select(Avg.Life.Expectancy.Years)
avg_le_white <- sum(le_white, na.rm = TRUE) / (nrow(le_white) - 2)
avg_le_white
avg_le_all <- sum(le_all, na.rm = TRUE) / (nrow(le_all) - 2)
le_all <- income_by_le %>%
filter(Race == "All Races") %>%
select(Avg.Life.Expectancy.Years)
avg_le_all <- sum(le_all, na.rm = TRUE) / (nrow(le_all) - 2)
avg_le_all
avg_le_black <- sum(le_black, na.rm = TRUE) / (nrow(le_black) - 2)
averages <- cbind.data.frame(average_medians, average_les)
average_medians <- c(avg_median_income_black, avg_median_income_white, avg_median_income_all)
average_les <- c(avg_le_black, avg_le_white, avg_le_all)
averages <- cbind.data.frame(average_medians, average_les)
averages <- cbind.data.frame(average_medians, average_les)
averages
cor(average_medians, average_les)
cor(averages$average_medians, averages$average_les)
avg <- sum(income_black_white_wide_median$race) / nrow(income_black_white_wide_median)
get_avg_medians(Black)
get_avg_medians <- function(race) {
avg <- sum(income_black_white_wide_median$race) / nrow(income_black_white_wide_median)
}
get_avg_medians(Black)
get_avg_medians <- function(race) {
avg <- sum(income_black_white_wide_median$race) / nrow(income_black_white_wide_median)
avg
}
get_avg_medians <- function(race) {
avg <- sum(income_black_white_wide_median$race) / nrow(income_black_white_wide_median)
avg
}
get_avg_medians(Black)
get_avg_medians <- function(race) {
avg <- sum(income_black_white_wide_median$race) / nrow(income_black_white_wide_median)
avg
}
get_avg_medians("Black")
get_avg_medians <- function(race) {
avg <- sum(income_black_white_wide_median$race) / nrow(income_black_white_wide_median)
print(avg)
}
get_avg_medians("Black")
get_avg_medians <- function(race) {
avg <- sum(income_black_white_wide_median$race)
print(avg)
}
get_avg_medians("Black")
race <- toString(race)
get_avg_medians <- function(race) {
race <- toString(race)
avg <- sum(income_black_white_wide_median$race)
print(avg)
}
get_avg_medians("Black")
correlation_income_le_race <- cor(average_medians, average_les)
correlation_income_le_race
runApp()
runApp()
runApp()
runApp()
runApp()
conditionalPanel(condition = "input.tabselected==2",
("choice", label = "Choose a Race",
choices = c("White" = 1, "African American" = 2, "Asian American" = 3, "Native American" = 4, "Latino" = 5 )),
selectInput("location", label = "Select Location (for Plot 2)", choices = locations)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Question 2", value = 2,
conditionalPanel(condition = "input.choice==1", plotlyOutput("plot2a")),
conditionalPanel(condition = "input.choice==2", plotlyOutput("plot2b")),
conditionalPanel(condition = "input.choice==3", plotlyOutput("plot2c")),
plotOutput("plot2d"),
dataTableOutput("table2")
),
id = "tabselected"
)
)
runApp()
le_at_birth_race
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
