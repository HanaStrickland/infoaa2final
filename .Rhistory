shiny::runApp('school/info-201/infoaa2final')
library(dplyr)
library(ggplot2)
library("maps")
library(tidyr)
library("readxl")
library(shiny)
library(plotly)
source("my_ui.R")
source("my_server.R")
income_by_race <- read_xlsx("data/income_by_race.xlsx")
le_national <- read_xlsx("data/life_expectancy_death_rates.xlsx")
pct_insurance_by_race <- read_xlsx("data/pct_insurance_by_race.xlsx")
le_by_state <- read.csv("data/IHME_US_STATE_LIFE_EXPECTANCY_1987_2009.csv", stringsAsFactors = FALSE)
le_by_income_state <- read.csv("data/health_ineq_online_table_5.csv", stringsAsFactors = FALSE)
le_at_birth_race <- read.csv("data/le_at_birth_race.csv", stringsAsFactors = FALSE)
income_by_race <- as.data.frame(income_by_race)
le_national <- as.data.frame(le_national)
pct_insurance_by_race <- as.data.frame(pct_insurance_by_race)
# Combine income and le dataframes
income_black_white <- income_by_race %>%
filter(Race %in% c("All Races", "White Alone", "Black Alone")) %>%
select(Year, Race, median)
le_black_white <- le_national %>%
filter(Sex == "Both Sexes") %>%
select(-Age.Adusted.Death.Rate)
income_black_white_wide_median <- spread(income_black_white,
key = "Race",
value = "median" )
colnames(income_black_white_wide_median) <- c("Year", "All Races", "Black", "White")
income_black_white <- gather(income_black_white_wide_median,
key = "Race",
value = "median_income", "All Races", "Black", "White")
income_by_le <- left_join(income_black_white, le_black_white, by = c("Year", "Race"))
#
le_at_birth_race <- le_at_birth_race %>%
mutate(Location = tolower(Location))
le_at_birth_race <- rename(le_at_birth_race, region = Location)
state_data <- map_data('state')
new_data <- left_join(state_data, le_at_birth_race)
new_data$African.American[new_data$African.American %in% "NSD"] <- "0"
new_data$African.American <- as.numeric(new_data$African.American)
change <- new_data %>%
mutate(cut(new_data$African.American, breaks = 4))
shinyApp(ui, server)
setwd("~/school/info-201/infoaa2final")
server <- function(input, output) {
# Server stuff
output$plot1 <- renderPlot({
plot1 <- ggplot(data = income_by_le) +
geom_point(mapping = aes(x = Avg.Life.Expectancy.Years, y = median_income,  color = Race)) +
labs(title = "Relationship Between Average Life Expectancy and Median Income",
x = "Average Life Expectancy",
y = "Median Income")
plot1
})
output$plot2 <- renderPlot({
plot2 <- ggplot(data = change) +
geom_polygon(aes(x = long, y = lat, group = group, fill =
cut(new_data$African.American, breaks = 4))) +
scale_fill_manual(values = c("#dd3497", "#ae017e", "#7a0177", "#49006a"), na.value = "#c994c7")
plot2 + geom_point()
ggplotly(plot2, tooltip="region")
})
}
ui <- fluidPage(
titlePanel("TITLE"),
sidebarLayout(
sidebarPanel(
# Sidebar panel
),
mainPanel(
# Main panel
navbarPage(tabPanel("Question 0"), # I don't know why it won't show the first tab pannel
tabPanel("Question 1", plotOutput("plot1")),
tabPanel("Question 2"), plotOutput("plot2"),
tabPanel("Question 3"),
tabPanel("Question 4")
)
)
)
)
survey_data <- read.csv("data/evictionlab-us-states.csv", stringsAsFactors = FALSE)
library(shiny)
library(ggplot2)  # for the survey_data dataset
library(DT)
library(plotly)
library(dplyr)
library(rsconnect)
eviction_rate <- select(survey_data, year, eviction.rate)
poverty_rate <- select(survey_data, year, poverty.rate)
year <- aggregate( eviction.rate ~ year, survey_data, mean )
poverty_rate <- aggregate( poverty.rate ~ year, survey_data, mean )
poverty_eviction <- left_join(poverty_rate, year)
delaware <- filter(survey_data, name == 'Delaware') %>%
select(year, eviction.rate)
vermont <- filter(survey_data, name == 'Vermont') %>%
select(year, eviction.rate)
#View(diamonds)
ui <- fluidPage(
title = "Examples of DataTables",
sidebarLayout(
sidebarPanel(
conditionalPanel(
'input.dataset === "survey_data"',
checkboxGroupInput("show_vars", "Columns in survey_data to show:",
names(survey_data), selected = names(survey_data))
),
conditionalPanel(
'input.dataset === "plot"',
tags$p("This graph shows the average eviction rate of the US, as well as the rate of eviction for Vermont, average
lowest rate of eviction, and Delaware, which has had the highest average eviction rate.")
)
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("survey_data", DT::dataTableOutput("mytable1")),
tabPanel("plot", plotlyOutput("plot"))
),
tags$blockquote("This research uses data from The Eviction Lab at Princeton University, a project directed by Matthew Desmond
and designed by Ashley Gromis, Lavar Edmonds, James Hendrickson, Katie Krywokulski, Lillian Leung, and Adam Porton.
The Eviction Lab is funded by the JPB, Gates, and Ford Foundations as well as the Chan Zuckerberg Initiative.
More information is found at evictionlab.org.")
)
)
)
server <- function(input, output) {
options(warn = -1)
# choose columns to display
m <- survey_data[sample(nrow(survey_data), 367, replace = FALSE, prob = NULL),]
survey_data2 = m
output$mytable1 <- DT::renderDataTable({
DT::datatable(survey_data2[, input$show_vars, drop = FALSE])
})
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
# specify some map projection/options
plot_ly(poverty_eviction, x = ~year, y = ~eviction.rate, name = 'USA Average Eviction Rate', type = 'scatter', mode = 'lines') %>%
add_trace(x = ~delaware$year, y = ~delaware$eviction.rate, name = 'Delaware Eviction Rate', type = 'scatter', mode = 'lines')  %>%
#add_trace(x = ~district_of_columbia$year, y = ~district_of_columbia$eviction.rate, name = 'District of Columbia Eviction Rate', type = 'scatter', mode = 'lines')
add_trace(x = ~vermont$year, y = ~vermont$eviction.rate, name = 'Vermont Eviction Rate', type = 'scatter', mode = 'lines')
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d)) "Click on a state to view event data" else d
})
}
shinyApp(ui, server)
