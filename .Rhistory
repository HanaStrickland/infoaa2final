setwd("~/school/info-201/a8-data-app-kelsiej")
shiny::runApp()
setwd("~/school/info-201/infoaa2final")
runApp()
library(dplyr)
library(ggplot2)
library("maps")
library(tidyr)
library("readxl")
library(shiny)
library(plotly)
source("my_ui.R")
source("my_server.R")
income_by_race <- read_xlsx("data/income_by_race.xlsx")
le_national <- read_xlsx("data/life_expectancy_death_rates.xlsx")
pct_insurance_by_race <- read_xlsx("data/pct_insurance_by_race.xlsx")
le_by_state <- read.csv("data/IHME_US_STATE_LIFE_EXPECTANCY_1987_2009.csv", stringsAsFactors = FALSE)
le_by_income_state <- read.csv("data/health_ineq_online_table_5.csv", stringsAsFactors = FALSE)
le_at_birth_race <- read.csv("data/le_at_birth_race.csv", stringsAsFactors = FALSE)
income_by_race <- as.data.frame(income_by_race)
le_national <- as.data.frame(le_national)
pct_insurance_by_race <- as.data.frame(pct_insurance_by_race)
# Combine income and le dataframes
income_black_white <- income_by_race %>%
filter(Race %in% c("All Races", "White Alone", "Black Alone")) %>%
select(Year, Race, median)
le_black_white <- le_national %>%
filter(Sex == "Both Sexes") %>%
select(-Age.Adusted.Death.Rate)
income_black_white_wide_median <- spread(income_black_white,
key = "Race",
value = "median" )
colnames(income_black_white_wide_median) <- c("Year", "All Races", "Black", "White")
income_black_white <- gather(income_black_white_wide_median,
key = "Race",
value = "median_income", "All Races", "Black", "White")
income_by_le <- left_join(income_black_white, le_black_white, by = c("Year", "Race"))
#find life expectancy per state for African Americans
le_at_birth_race <- le_at_birth_race %>%
mutate(Location = tolower(Location))
le_at_birth_race <- rename(le_at_birth_race, region = Location)
state_data <- map_data('state')
new_data <- left_join(state_data, le_at_birth_race)
new_data$African.American[new_data$African.American %in% "NSD"] <- "0"
new_data[new_data == 0] <- NA
new_data$African.American <- as.numeric(new_data$African.American)
change <- new_data %>%
mutate(cut(new_data$African.American, breaks = 4))
runApp()
income_by_race <- read_xlsx("data/income_by_race.xlsx")
le_national <- read_xlsx("data/life_expectancy_death_rates.xlsx")
pct_insurance_by_race <- read_xlsx("data/pct_insurance_by_race.xlsx")
le_by_state <- read.csv("data/IHME_US_STATE_LIFE_EXPECTANCY_1987_2009.csv", stringsAsFactors = FALSE)
le_by_income_state <- read.csv("data/health_ineq_online_table_5.csv", stringsAsFactors = FALSE)
le_at_birth_race <- read.csv("data/le_at_birth_race.csv", stringsAsFactors = FALSE)
income_by_race <- as.data.frame(income_by_race)
le_national <- as.data.frame(le_national)
pct_insurance_by_race <- as.data.frame(pct_insurance_by_race)
# Combine income and le dataframes
income_black_white <- income_by_race %>%
filter(Race %in% c("All Races", "White Alone", "Black Alone")) %>%
select(Year, Race, median)
le_black_white <- le_national %>%
filter(Sex == "Both Sexes") %>%
select(-Age.Adusted.Death.Rate)
income_black_white_wide_median <- spread(income_black_white,
key = "Race",
value = "median" )
colnames(income_black_white_wide_median) <- c("Year", "All Races", "Black", "White")
income_black_white <- gather(income_black_white_wide_median,
key = "Race",
value = "median_income", "All Races", "Black", "White")
income_by_le <- left_join(income_black_white, le_black_white, by = c("Year", "Race"))
income_by_le
#find life expectancy per state for African Americans
le_at_birth_race <- le_at_birth_race %>%
mutate(Location = tolower(Location))
le_at_birth_race <- rename(le_at_birth_race, region = Location)
state_data <- map_data('state')
new_data <- left_join(state_data, le_at_birth_race)
new_data$African.American[new_data$African.American %in% "NSD"] <- "0"
new_data[new_data == 0] <- NA
new_data$African.American <- as.numeric(new_data$African.American)
change <- new_data %>%
mutate(cut(new_data$African.American, breaks = 4))
#le_by_state source
#http://ghdx.healthdata.org/record/united-states-adult-life-expectancy-state-and-county-1987-2009#
#le_by_income_state
#https://healthinequality.org/data/ table 5#
aserver <- function(input, output) {
source("data_wrangling.R")
# Server stuff
output$plot1a <- renderPlot({
plot1a <- ggplot(data = income_by_le) +
geom_point(mapping = aes(x = Avg.Life.Expectancy.Years, y = median_income,  color = Race)) +
labs(title = "Relationship Between Average Life Expectancy and Median Income",
x = "Average Life Expectancy",
y = "Median Income")
plot1a
})
output$plot1b <- renderPlot({
plot1b <- ggplot(data = income_by_le) +
geom_point(mapping = aes(x = Year, y = median_income,  color = Race)) +
labs(title = "Median Income Over Tiime",
x = "Year",
y = "Median Income")
plot1b
})
output$plot1c <- renderPlot({
plot1c <- ggplot(data = income_by_le) +
geom_point(mapping = aes(x = Year, y = Avg.Life.Expectancy.Years,  color = Race)) +
labs(title = "Average Life Expectancy Over Tiime",
x = "Year",
y = "Average Life Expectancy")
plot1c
})
output$plot2 <- renderPlotly({
plot2 <- ggplot(data = change) +
geom_polygon(aes(x = long, y = lat, group = group, fill =
cut(new_data$African.American, breaks = 4))) +
scale_fill_manual(values = c("#dd3497", "#ae017e", "#7a0177", "#49006a"), na.value = "#f0f0f0")
plot2 + geom_point()
ggplotly(plot2, tooltip="region")
})
}
ui <- fluidPage(
titlePanel("TITLE"),
sidebarLayout(
sidebarPanel(
# Sidebar panel
),
mainPanel(
# Main panel
tabsetPanel(
type = "tabs",
tabPanel("Question 1", plotOutput("plot1a"),plotOutput("plot1b"), plotOutput("plot1c") ),
tabPanel("Question 2", plotlyOutput("plot2"))
)
)
)
)
runApp()
aserver <- function(input, output) {
source("data_wrangling.R")
# Server stuff
output$plot1a <- renderPlot({
plot1a <- ggplot(data = income_by_le) +
geom_point(mapping = aes(x = Avg.Life.Expectancy.Years, y = median_income,  color = Race)) +
labs(title = "Relationship Between Average Life Expectancy and Median Income",
x = "Average Life Expectancy",
y = "Median Income")
plot1a
})
output$plot1b <- renderPlot({
plot1b <- ggplot(data = income_by_le) +
geom_point(mapping = aes(x = Year, y = median_income,  color = Race)) +
labs(title = "Median Income Over Tiime",
x = "Year",
y = "Median Income")
plot1b
})
output$plot1c <- renderPlot({
plot1c <- ggplot(data = income_by_le) +
geom_point(mapping = aes(x = Year, y = Avg.Life.Expectancy.Years,  color = Race)) +
labs(title = "Average Life Expectancy Over Tiime",
x = "Year",
y = "Average Life Expectancy")
plot1c
})
output$plot2 <- renderPlotly({
plot2 <- ggplot(data = change) +
geom_polygon(aes(x = long, y = lat, group = group, fill =
cut(new_data$White, breaks = 4))) +
scale_fill_manual(values = c("#dd3497", "#ae017e", "#7a0177", "#49006a"), na.value = "#f0f0f0")
plot2 + geom_point()
ggplotly(plot2, tooltip="region")
})
}
runApp()
View(new_data)
aserver <- function(input, output) {
source("data_wrangling.R")
# Server stuff
output$plot1a <- renderPlot({
plot1a <- ggplot(data = income_by_le) +
geom_point(mapping = aes(x = Avg.Life.Expectancy.Years, y = median_income,  color = Race)) +
labs(title = "Relationship Between Average Life Expectancy and Median Income",
x = "Average Life Expectancy",
y = "Median Income")
plot1a
})
output$plot1b <- renderPlot({
plot1b <- ggplot(data = income_by_le) +
geom_point(mapping = aes(x = Year, y = median_income,  color = Race)) +
labs(title = "Median Income Over Tiime",
x = "Year",
y = "Median Income")
plot1b
})
output$plot1c <- renderPlot({
plot1c <- ggplot(data = income_by_le) +
geom_point(mapping = aes(x = Year, y = Avg.Life.Expectancy.Years,  color = Race)) +
labs(title = "Average Life Expectancy Over Tiime",
x = "Year",
y = "Average Life Expectancy")
plot1c
})
output$plot2 <- renderPlotly({
plot2 <- ggplot(data = new_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill =
cut(new_data$White, breaks = 4))) +
scale_fill_manual(values = c("#dd3497", "#ae017e", "#7a0177", "#49006a"), na.value = "#f0f0f0")
plot2 + geom_point()
ggplotly(plot2, tooltip="region")
})
}
runApp()
plot2 <- ggplot(data = new_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill =
cut(new_data$White, breaks = 4))) +
scale_fill_manual(values = c("#dd3497", "#ae017e", "#7a0177", "#49006a"), na.value = "#f0f0f0")
plot2 + geom_point()
ggplotly(plot2, tooltip="region")
source("my_ui.R")
source("my_server.R")
runApp()
runApp()
output$plot2 <- renderPlotly({
plot2 <- ggplot(data = new_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill =
cut(new_data$White, breaks = 4))) +
scale_fill_manual(values = c("#dd3497", "#ae017e", "#7a0177", "#49006a"), na.value = "#f0f0f0")
plot2 + geom_point()
ggplotly(plot2, tooltip="region")
})
}
ui <- fluidPage(
titlePanel("TITLE"),
sidebarLayout(
sidebarPanel(
# Sidebar panel
),
mainPanel(
# Main panel
tabsetPanel(
type = "tabs",
tabPanel("Question 1", plotOutput("plot1a"),plotOutput("plot1b"), plotOutput("plot1c") ),
tabPanel("Question 2", plotlyOutput("plot2"))
)
)
)
)
runApp()
